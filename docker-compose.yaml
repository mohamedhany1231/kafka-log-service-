services:
  web:
    build: .
    networks:
      - app-tier
    ports:
      - "3000:3000"
    environment:
      - port=3000
    depends_on:
      - kafka
      - mongo

    restart: always

  # mongo:
  #   image: mongo
  #   restart: always
  #   container_name: mongo
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongo-data:/data/db

  # mongo-express:
  #   image: mongo-express
  #   restart: unless-stopped
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_SERVER: mongo

  mongo:
    image: mongo
    restart: always
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - app-tier
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      - mongo

  kafka:
    image: "bitnami/kafka:latest"
    container_name: "kafka"
    networks:
      - app-tier
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

    volumes:
      - kafka-volume:/data/kafka

volumes:
  mongo-data:
  kafka-volume:

networks:
  app-tier:
    driver: bridge
